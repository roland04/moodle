{"version":3,"file":"dynamic_tabs.min.js","sources":["../src/dynamic_tabs.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Dynamic Tabs UI element with AJAX loading of tabs content\n *\n * @module      core/dynamic_tabs\n * @copyright   2021 David Matamoros <davidmc@moodle.com> based on code from Marina Glancy\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport Templates from 'core/templates';\nimport {addIconToContainer} from 'core/loadingicon';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {getStrings} from 'core/str';\nimport {getContent} from 'core/local/repository/dynamic_tabs';\nimport {isAnyWatchedFormDirty, resetAllFormDirtyStates} from 'core_form/changechecker';\n\nconst SELECTORS = {\n    dynamicTabs: '.dynamictabs',\n    activeTab: '.dynamictabs .nav-link.active',\n    allActiveTabs: '.dynamictabs .nav-link[data-bs-toggle=\"tab\"]:not(.disabled)',\n    tabContent: '.dynamictabs .tab-pane [data-tab-content]',\n    tabToggle: 'a[data-bs-toggle=\"tab\"]',\n    tabPane: '.dynamictabs .tab-pane',\n};\n\nSELECTORS.forTabName = tabName => `.dynamictabs [data-tab-content=\"${tabName}\"]`;\nSELECTORS.forTabId = tabName => `.dynamictabs [data-bs-toggle=\"tab\"][href=\"#${tabName}\"]`;\n\n/**\n * Initialises the tabs view on the page (only one tabs view per page is supported)\n */\nexport const init = () => {\n    const tabToggles = document.querySelectorAll(SELECTORS.tabToggle);\n\n    tabToggles.forEach(tabToggle => {\n        // Listen to click, warn user if they are navigating away with unsaved form changes.\n        tabToggle.addEventListener('click', (event) => {\n            if (!isAnyWatchedFormDirty()) {\n                return;\n            }\n\n            event.preventDefault();\n            event.stopPropagation();\n\n            getStrings([\n                {key: 'changesmade', component: 'moodle'},\n                {key: 'changesmadereallygoaway', component: 'moodle'},\n                {key: 'confirm', component: 'moodle'},\n            ]).then(([strChangesMade, strChangesMadeReally, strConfirm]) =>\n                // Reset form dirty state on confirmation, re-trigger the event.\n                Notification.confirm(strChangesMade, strChangesMadeReally, strConfirm, null, () => {\n                    resetAllFormDirtyStates();\n                    $(event.target).trigger(event.type);\n                })\n            ).catch(Notification.exception);\n        });\n\n        tabToggle.addEventListener('show.bs.tab', () => {\n            // Clean content from previous tab.\n            const previousTabName = getActiveTabName();\n            if (previousTabName) {\n                const previousTab = document.querySelector(SELECTORS.forTabName(previousTabName));\n                previousTab.textContent = '';\n            }\n        });\n\n        tabToggle.addEventListener('shown.bs.tab', () => {\n            const tabPane = document.getElementById(tabToggle.getAttribute('href').replace(/^#/, ''));\n            if (tabPane) {\n                loadTab(tabPane.id);\n            }\n        });\n    });\n\n    if (!openTabFromHash()) {\n        const tabs = document.querySelector(SELECTORS.allActiveTabs);\n        if (tabs) {\n            openTab(tabs.getAttribute('aria-controls'));\n        } else {\n            // We may hide tabs if there is only one available, just load the contents of the first tab.\n            const tabPane = document.querySelector(SELECTORS.tabPane);\n            if (tabPane) {\n                tabPane.classList.add('active', 'show');\n                loadTab(tabPane.getAttribute('id'));\n            }\n        }\n    }\n};\n\n/**\n * Returns id/name of the currently active tab\n *\n * @return {String|null}\n */\nconst getActiveTabName = () => {\n    const element = document.querySelector(SELECTORS.activeTab);\n    return element?.getAttribute('aria-controls') || null;\n};\n\n/**\n * Returns the id/name of the first tab\n *\n * @return {String|null}\n */\nconst getFirstTabName = () => {\n    const element = document.querySelector(SELECTORS.tabContent);\n    return element?.dataset.tabContent || null;\n};\n\n/**\n * Loads contents of a tab using an AJAX request\n *\n * @param {String} tabName\n */\nconst loadTab = (tabName) => {\n    // If tabName is not specified find the active tab, or if is not defined, the first available tab.\n    tabName = tabName ?? getActiveTabName() ?? getFirstTabName();\n    const tab = document.querySelector(SELECTORS.forTabName(tabName));\n    if (!tab) {\n        return;\n    }\n\n    const pendingPromise = new Pending('core/dynamic_tabs:loadTab:' + tabName);\n\n    addIconToContainer(tab)\n    .then(() => {\n        let tabArgs = {...tab.dataset};\n        delete tabArgs.tabClass;\n        delete tabArgs.tabContent;\n        return getContent(tab.dataset.tabClass, JSON.stringify(tabArgs));\n    })\n    .then(response => Promise.all([\n        $.parseHTML(response.javascript, null, true).map(node => node.innerHTML).join(\"\\n\"),\n        Templates.renderForPromise(response.template, JSON.parse(response.content)),\n    ]))\n    .then(([responseJs, {html, js}]) => Templates.replaceNodeContents(tab, html, js + responseJs))\n    .then(() => pendingPromise.resolve())\n    .catch(Notification.exception);\n};\n\n/**\n * Return the tab given the tab name\n *\n * @param {String} tabName\n * @return {HTMLElement}\n */\nconst getTab = (tabName) => {\n    return document.querySelector(SELECTORS.forTabId(tabName));\n};\n\n/**\n * Return the tab pane given the tab name\n *\n * @param {String} tabName\n * @return {HTMLElement}\n */\nconst getTabPane = (tabName) => {\n    return document.getElementById(tabName);\n};\n\n/**\n * Open the tab on page load. If this script loads before theme_boost/tab we need to open tab ourselves\n *\n * @param {String} tabName\n * @return {Boolean}\n */\nconst openTab = (tabName) => {\n    const tab = getTab(tabName);\n    if (!tab) {\n        return false;\n    }\n\n    loadTab(tabName);\n    tab.classList.add('active');\n    getTabPane(tabName).classList.add('active', 'show');\n    return true;\n};\n\n/**\n * If there is a location hash that is the same as the tab name - open this tab.\n *\n * @return {Boolean}\n */\nconst openTabFromHash = () => {\n    const hash = document.location.hash;\n    if (hash.match(/^#\\w+$/g)) {\n        return openTab(hash.replace(/^#/g, ''));\n    }\n\n    return false;\n};\n"],"names":["SELECTORS","dynamicTabs","activeTab","allActiveTabs","tabContent","tabToggle","tabPane","tabName","document","querySelectorAll","forEach","addEventListener","event","preventDefault","stopPropagation","key","component","then","_ref","strChangesMade","strChangesMadeReally","strConfirm","Notification","confirm","target","trigger","type","catch","exception","previousTabName","getActiveTabName","querySelector","forTabName","textContent","getElementById","getAttribute","replace","loadTab","id","openTabFromHash","tabs","openTab","classList","add","element","dataset","getFirstTabName","tab","pendingPromise","Pending","tabArgs","tabClass","JSON","stringify","response","Promise","all","$","parseHTML","javascript","map","node","innerHTML","join","Templates","renderForPromise","template","parse","content","_ref3","responseJs","html","js","replaceNodeContents","resolve","forTabId","getTab","getTabPane","hash","location","match"],"mappings":";;;;;;;4QAgCMA,UAAY,CACdC,YAAa,eACbC,UAAW,gCACXC,cAAe,8DACfC,WAAY,4CACZC,UAAW,0BACXC,QAAS,yBAGbN,WAAuBO,mDAA8CA,cACrEP,SAAqBO,8DAAyDA,6BAK1D,QACGC,SAASC,iBAAiBT,UAAUK,WAE5CK,SAAQL,YAEfA,UAAUM,iBAAiB,SAAUC,SAC5B,4CAILA,MAAMC,iBACND,MAAME,sCAEK,CACP,CAACC,IAAK,cAAeC,UAAW,UAChC,CAACD,IAAK,0BAA2BC,UAAW,UAC5C,CAACD,IAAK,UAAWC,UAAW,YAC7BC,MAAKC,WAAEC,eAAgBC,qBAAsBC,wBAE5CC,sBAAaC,QAAQJ,eAAgBC,qBAAsBC,WAAY,MAAM,sEAEvET,MAAMY,QAAQC,QAAQb,MAAMc,YAEpCC,MAAML,sBAAaM,eAGzBvB,UAAUM,iBAAiB,eAAe,WAEhCkB,gBAAkBC,sBACpBD,gBAAiB,CACGrB,SAASuB,cAAc/B,UAAUgC,WAAWH,kBACpDI,YAAc,OAIlC5B,UAAUM,iBAAiB,gBAAgB,WACjCL,QAAUE,SAAS0B,eAAe7B,UAAU8B,aAAa,QAAQC,QAAQ,KAAM,KACjF9B,SACA+B,QAAQ/B,QAAQgC,WAKvBC,kBAAmB,OACdC,KAAOhC,SAASuB,cAAc/B,UAAUG,kBAC1CqC,KACAC,QAAQD,KAAKL,aAAa,sBACvB,OAEG7B,QAAUE,SAASuB,cAAc/B,UAAUM,SAC7CA,UACAA,QAAQoC,UAAUC,IAAI,SAAU,QAChCN,QAAQ/B,QAAQ6B,aAAa,iBAWvCL,iBAAmB,WACfc,QAAUpC,SAASuB,cAAc/B,UAAUE,kBAC1C0C,MAAAA,eAAAA,QAAST,aAAa,mBAAoB,MAkB/CE,QAAW9B,6BAEbA,uCAAUA,qCAAWuB,0CAZD,YACdc,QAAUpC,SAASuB,cAAc/B,UAAUI,mBAC1CwC,MAAAA,eAAAA,QAASC,QAAQzC,aAAc,MAUK0C,SACrCC,IAAMvC,SAASuB,cAAc/B,UAAUgC,WAAWzB,cACnDwC,iBAICC,eAAiB,IAAIC,iBAAQ,6BAA+B1C,6CAE/CwC,KAClB9B,MAAK,SACEiC,QAAU,IAAIH,IAAIF,uBACfK,QAAQC,gBACRD,QAAQ9C,YACR,4BAAW2C,IAAIF,QAAQM,SAAUC,KAAKC,UAAUH,aAE1DjC,MAAKqC,UAAYC,QAAQC,IAAI,CAC1BC,gBAAEC,UAAUJ,SAASK,WAAY,MAAM,GAAMC,KAAIC,MAAQA,KAAKC,YAAWC,KAAK,MAC9EC,mBAAUC,iBAAiBX,SAASY,SAAUd,KAAKe,MAAMb,SAASc,cAErEnD,MAAKoD,YAAEC,YAAYC,KAACA,KAADC,GAAOA,kBAASR,mBAAUS,oBAAoB1B,IAAKwB,KAAMC,GAAKF,eACjFrD,MAAK,IAAM+B,eAAe0B,YAC1B/C,MAAML,sBAAaM,YA6BlBa,QAAWlC,gBACPwC,IArBMxC,CAAAA,SACLC,SAASuB,cAAc/B,UAAU2E,SAASpE,UAoBrCqE,CAAOrE,iBACdwC,MAILV,QAAQ9B,SACRwC,IAAIL,UAAUC,IAAI,UAjBFpC,CAAAA,SACTC,SAAS0B,eAAe3B,SAiB/BsE,CAAWtE,SAASmC,UAAUC,IAAI,SAAU,SACrC,IAQLJ,gBAAkB,WACduC,KAAOtE,SAASuE,SAASD,aAC3BA,KAAKE,MAAM,YACJvC,QAAQqC,KAAK1C,QAAQ,MAAO"}